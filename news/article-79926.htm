<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://nekoraygithub.github.io/news/article-79926.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>从Java的堆栈到Equals和==的比較</title>
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
        <meta name="description" content="认识Java中堆和栈  栈与堆都是Java用来在Ram中存放数据的地方。 与C++不同。Java自己主动管理栈和堆，程序猿不能直接地设置栈或堆。 Java的堆是一个执行时数据区,类的对象从中分配空间。" />
        <!-- Favicon -->
    <link href="/assets/website/img/nekoraygithub/favicon.ico" rel="icon">

    <meta name="author" content="Nekoray Github节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://nekoraygithub.github.io/news/article-79926.htm" />
    <meta property="og:site_name" content="Nekoray Github节点订阅官网" />
    <meta property="og:title" content="从Java的堆栈到Equals和==的比較" />
    <meta property="og:image" content="https://nekoraygithub.github.io/uploads/20240819/372364ef3a9b9b59d337173004471c51.webp" />
        <meta property="og:release_date" content="2025-03-23T08:25:07" />
    <meta property="og:updated_time" content="2025-03-23T08:25:07" />
        <meta property="og:description" content="认识Java中堆和栈  栈与堆都是Java用来在Ram中存放数据的地方。 与C++不同。Java自己主动管理栈和堆，程序猿不能直接地设置栈或堆。 Java的堆是一个执行时数据区,类的对象从中分配空间。" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="从Java的堆栈到Equals和==的比較">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- google-fonts -->
    <link href="//fonts.googleapis.com/css2?family=Ubuntu:wght@300;400;500;700&display=swap" rel="stylesheet">
    <!-- //google-fonts -->
    <!-- Font-Awesome-Icons-CSS -->
    <link rel="stylesheet" href="/assets/website/css/nekoraygithub/fontawesome-all.min.css">
    <!-- Template CSS Style link -->
    <link rel="stylesheet" href="/assets/website/css/nekoraygithub/style-starter.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-PLCXEZFQTC"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-PLCXEZFQTC');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke px-0">
                <a class="navbar-brand" href="/">
                                <span>Nekoray Github</span>
                                </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-lg-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/client.htm">客户端</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                            </ul>
                </div>
                <!-- //search button -->
                <!-- toggle switch for light and dark theme -->
                <div class="cont-ser-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--//header-->
    <!-- inner banner -->
    <div class="inner-banner">
        <section class="w3l-breadcrumb">
            <div class="container">
                <h1 class="inner-text-title font-weight-bold mb-2">从Java的堆栈到Equals和==的比較</h1>
                <ul class="breadcrumbs-custom-path">
                    <li><a href="/">首页</a></li>
                    <li><a href="/news/"><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span>新闻资讯</a></li>
                    <li class="active"><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span>正文</li>
                </ul>
            </div>
        </section>
    </div>
    <!-- //inner banner -->
    <!-- about section -->
    <div class="w3l-content-photo-5 py-5">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="NekoRayNode节点订阅站" data-url="https://nekoraynode.github.io">
                  				  				  				<div id="content_views" class="htmledit_views"> <div id="cnblogs_post_body" class="blogpost-body"> <div id="article_content" class="article_content"> <p><span style="font-family:'Microsoft YaHei';font-size:12px;">认识Java中堆和栈</span></p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;"><br /></span></p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;">栈与堆都是Java用来在Ram中存放数据的地方。</span></p> <p>与C++不同。Java自己主动管理栈和堆，程序猿不能直接地设置栈或堆。<br /> Java的堆是一个执行时数据区,类的对象从中分配空间。这些对象通过new、newarray、anewarray和 multianewarray等指令建立，它们不须要程序代码来显式的释放。</p> <p>堆是由垃圾回收来负责的，堆的优势是能够动态地分配内存大小，生存期也不必事先告诉编译器。由于它是在执行时动态分配内存的。Java的垃圾收集器会自己主动收走这些不再使用的数据。但缺点是，由于要在执行时动态分配内存，存取速度较慢。</p> <p> 栈的优势是，存取速度比堆要快。仅次于寄存器，栈数据能够共享。</p> <p>但缺点是。存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。栈中主要存放一些基本类型的变量（,int, short, long, byte, float, double, boolean, char）和对象句柄。</p> <p>栈有一个非常重要的特殊性，就是存在栈中的数据能够共享。</p> <p> 如果我们同一时候定义：<br /> int a = 3。<br /> int b = 3；</p> <p> 编译器先处理int a = 3；首先它会在栈中创建一个变量为a的引用。然后查找栈中是否有3这个值。假设没找到。就将3存放进来，然后将a指向3。</p> <p>接着处理int b = 3；在创建完b的引用变量后，由于在栈中已经有3这个值，便将b直接指向3。这样，就出现了a与b同一时候均指向3的情况。</p> <p>这时。假设再令a=4。那么编译器会又一次搜索栈中是否有4值，假设没有，则将4存放进来。并令a指向4；假设已经有了，则直接将a指向这个地址。因此a值的改变不会影响到b的值。&nbsp;</p> <p> &nbsp;要注意这样的数据的共享与两个对象的引用同一时候指向一个对象的这样的共享是不同的。由于这样的情况a的改动并不会影响到b, 它是由编译器完毕的，它有利于节省空间。</p> <p>而一个对象引用变量改动了这个对象的内部状态。会影响到还有一个对象引用变量。&nbsp;<br /> String是一个特殊的包装类数据。</p> <p> 能够用：&nbsp;<br /> String str = new String("abc");&nbsp;<br /> String str = "abc";&nbsp;</p> <p> &nbsp;两种的形式来创建，第一种是用new()来新建对象的。它会在存放于堆中。每调用一次就会创建一个新的对象。 而另外一种是先在栈中创建一个对String类的对象引用变量str，然后查找栈中有没有存放"abc"，假设没有。则将"abc"存放进栈，并令str指 向”abc”，假设已经有”abc” 则直接令str指向“abc”。&nbsp;</p> <p> 比較类里面的数值是否相等时，用equals()方法。当測试两个包装类的引用是否指向同一个对象时，用==，以下用样例说明上面的理论。&nbsp;<br /> String str1 = "abc";&nbsp;<br /> String str2 = "abc";&nbsp;<br /> System.out.println(str1==str2); //true&nbsp;<br /> 能够看出str1和str2是指向同一个对象的。&nbsp;</p> <p> String str1 =new String ("abc");&nbsp;<br /> String str2 =new String ("abc");&nbsp;<br /> System.out.println(str1==str2); // false&nbsp;<br /> 用new的方式是生成不同的对象。</p> <p>每一次生成一个。</p> <p> 因此用另外一种方式(String str1 ="abc")创建多个”abc”字符串,在内存中事实上仅仅存在一个对象而已. 这样的写法有利与节省内存空间. 同一时候它能够在一定程度上提高程序的执行速度，由于JVM会自己主动依据栈中数据的实际情况来决定是否有必要创建新对象。而对于String str = new String("abc")的代码。则一概在堆中创建新对象，而无论其字符串值是否相等，是否有必要创建新对象，从而加重了程序的负担。</p> <p> &nbsp;还有一方面, 要注意: 我们在使用诸如String str = "abc"；的格式定义类时。总是想当然地觉得，创建了String类的对象str。操心陷阱！对象可能并没有被创建！</p> <p>而可能仅仅是指向一个先前已经创建的 对象。仅仅有通过new()方法才干保证每次都创建一个新的对象。&nbsp;<br /> 因为String类的immutable性质，当String变量须要常常变换其值时。应该考虑使用StringBuffer类，以提高程序效率。&nbsp;</p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;"><br /></span></p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;">************************************************************************************************************************************************************</span></p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;"><br /></span></p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;">Java中Equals和==的差别</span></p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;">java中的数据类型，可分为两类：&nbsp;<br /> 1.基本数据类型，也称原始数据类型。byte,short,char,int,long,float,double,boolean&nbsp;<br /> &nbsp; 他们之间的比較，应用双等号（==）,比較的是他们的值。</span></p> <p>&nbsp;<br /> 2.复合数据类型(类)&nbsp;<br /> &nbsp; 当他们用（==）进行比較的时候，比較的是他们在内存中的存放地址，所以，除非是同一个new出来的对象，他们的比較后的结果为true，否则比較后结果为false。</p> <p> JAVA其中全部的类都是继承于Object这个基类的。在Object中的基类中定义了一个equals的方法，这种方法的初始行为是比較对象的内存地 址，但在一些类库其中这种方法被覆盖掉了。如String,Integer,Date在这些类其中equals有其自身的实现。而不再是比較类在堆内存中的存放地址了。</p> <p> &nbsp; 对于复合数据类型之间进行equals比較。在没有覆写equals方法的情况下，他们之间的比較还是基于他们在内存中的存放位置的地址值的，由于Object的equals方法也是用双等号（==）进行比較的。所以比較后的结果跟双等号（==）的结果同样。</p> <p></p> <pre><code class="language-html">&lt;span style="font-family:Microsoft YaHei;font-size:12px;"&gt;public class TestString { 	public static void main(String[] args) { 		String s1 = "Monday"; 		String s2 = "Monday"; 		if (s1 == s2) { 			System.out.println("s1 == s2"); 		} else { 			System.out.println("s1 != s2"); 		} 	} }&lt;/span&gt;</code></pre> <p><span style="font-family:'Microsoft YaHei';font-size:12px;"><br /></span></p> <p>  <span style="font-family:'Microsoft YaHei';font-size:12px;">编译并执行程序，输出：s1 == s2说明：s1 与 s2 引用同一个 String 对象 -- "Monday"!<br /> 2.再略微修改一下程序，会有更奇怪的发现：</span> </p> <pre><code class="language-html">&lt;span style="font-family:Microsoft YaHei;font-size:12px;"&gt;public class TestString { public static void main(String[] args) { String s1 = "Monday"; String s2 = new String("Monday"); if (s1 == s2) {System.out.println("s1 == s2");} else {System.out.println("s1 != s2");} if (s1.equals(s2)) {System.out.println("s1 equals s2");} else{ System.out.println("s1 not equals s2");} } }&lt;/span&gt;</code></pre> <p>  <span style="font-family:'Microsoft YaHei';font-size:12px;"><br /> 我们将s2用new操作符创建<br /> 程序输出：<br /> s1 != s2<br /> s1 equals s2<br /> 说明：s1 s2分别引用了两个"Monday"String对象</p> <p> 3. 字符串缓冲池<br /> 原来，程序在执行的时候会创建一个字符串缓冲池当使用 s2 = "Monday" 这种表达是创建字符串的时候，程序首先会在这个String缓冲池中寻找同样值的对象，在第一个程序中。s1先被放到了池中，所以在s2被创建的时候，程序找到了具有同样值的 s1<br /> 将s2引用s1所引用的对象"Monday"<br /> 第二段程序中，使用了 new 操作符，他明确的告诉程序："我要一个新的！不要旧的。"于是一个新的"Monday"Sting对象被创建在内存中。他们的值同样。可是位置不同。一个在池中游泳一个在岸边歇息。哎呀。真是资源浪费。明明是一样的非要分开做什么呢？</p> <p> 4.再次更改程序：</span> </p> <pre><code class="language-html">&lt;span style="font-family:Microsoft YaHei;font-size:12px;"&gt;public class TestString { public static void main(String[] args) { String s1 = "Monday"; String s2 = new String("Monday"); s2 = s2.intern(); if (s1 == s2) {System.out.println("s1 == s2");} else {System.out.println("s1 != s2");} if (s1.equals(s2)) {System.out.println("s1 equals s2");} else{ System.out.println("s1 not equals s2");} } }&lt;/span&gt;</code></pre> <p>  <span style="font-family:'Microsoft YaHei';font-size:12px;"><br /> 这次增加：s2 = s2.intern();<br /> 程序输出：<br /> s1 == s2<br /> s1 equals s2<br /> 原 来。（java.lang.String的intern()方法"abc".intern()方法的返回值还是字符串"abc"，表面上看起来好像这个方 法没什么用处。但实际上。它做了个小动作：检查字符串池里是否存在"abc"这么一个字符串，假设存在，就返回池里的字符串。假设不存在。该方法会 把"abc"加入到字符串池中，然后再返回它的引用。<br /> ）</span> </p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;"><br /></span></p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;">************************************************************************************************************************************************************</span></p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;"><br /></span></p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;">查看源代码发表小结：</span></p> <pre><code class="language-html">&lt;span style="font-family:Microsoft YaHei;font-size:12px;"&gt;public boolean equals(Object anObject) {         if (this == anObject) {             return true;         }         if (anObject instanceof String) {             String anotherString = (String) anObject;             int n = value.length;             if (n == anotherString.value.length) {                 char v1[] = value;                 char v2[] = anotherString.value;                 int i = 0;                 while (n-- != 0) {                     if (v1[i] != v2[i])                             return false;                     i++;                 }                 return true;             }         }         return false;     }&lt;/span&gt;</code></pre> <p><span style="font-family:'Microsoft YaHei';font-size:12px;"><br /></span></p> <p>  <span style="font-family:'Microsoft YaHei';font-size:12px;">上面的这一段是String的equals源代码，通过细心的解读我们能够发现当中的奥妙。</span></p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;">String重写的equals方法保留了Object比較两个对象内容地址是否相等。</span></p> <p>在此基础上添加了一个比較String的值是否相等。这是什么意思呢。 假设equals括号中的对象不是String类型的。那么比較他和原对象的内存地址是否相等。假设instanceofString 那么先把这个对象转为String，再把它的值变为char数组，也就是以下的value，假设他们的char数组长度相等再对这个数组的char进行一个个遍历比較是否一样。假设都一样就equals为true，否则为false。</p> </p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;"><br /></span></p> </p></div> </div></div> <p><span style="font-family:'Microsoft YaHei';font-size:12px;">认识Java中堆和栈</span></p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;"><br /></span></p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;">栈与堆都是Java用来在Ram中存放数据的地方。</span></p> <p>与C++不同。Java自己主动管理栈和堆，程序猿不能直接地设置栈或堆。<br /> Java的堆是一个执行时数据区,类的对象从中分配空间。这些对象通过new、newarray、anewarray和 multianewarray等指令建立，它们不须要程序代码来显式的释放。</p> <p>堆是由垃圾回收来负责的，堆的优势是能够动态地分配内存大小，生存期也不必事先告诉编译器。由于它是在执行时动态分配内存的。Java的垃圾收集器会自己主动收走这些不再使用的数据。但缺点是，由于要在执行时动态分配内存，存取速度较慢。</p> <p> 栈的优势是，存取速度比堆要快。仅次于寄存器，栈数据能够共享。</p> <p>但缺点是。存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。栈中主要存放一些基本类型的变量（,int, short, long, byte, float, double, boolean, char）和对象句柄。</p> <p>栈有一个非常重要的特殊性，就是存在栈中的数据能够共享。</p> <p> 如果我们同一时候定义：<br /> int a = 3。<br /> int b = 3；</p> <p> 编译器先处理int a = 3；首先它会在栈中创建一个变量为a的引用。然后查找栈中是否有3这个值。假设没找到。就将3存放进来，然后将a指向3。</p> <p>接着处理int b = 3；在创建完b的引用变量后，由于在栈中已经有3这个值，便将b直接指向3。这样，就出现了a与b同一时候均指向3的情况。</p> <p>这时。假设再令a=4。那么编译器会又一次搜索栈中是否有4值，假设没有，则将4存放进来。并令a指向4；假设已经有了，则直接将a指向这个地址。因此a值的改变不会影响到b的值。&nbsp;</p> <p> &nbsp;要注意这样的数据的共享与两个对象的引用同一时候指向一个对象的这样的共享是不同的。由于这样的情况a的改动并不会影响到b, 它是由编译器完毕的，它有利于节省空间。</p> <p>而一个对象引用变量改动了这个对象的内部状态。会影响到还有一个对象引用变量。&nbsp;<br /> String是一个特殊的包装类数据。</p> <p> 能够用：&nbsp;<br /> String str = new String("abc");&nbsp;<br /> String str = "abc";&nbsp;</p> <p> &nbsp;两种的形式来创建，第一种是用new()来新建对象的。它会在存放于堆中。每调用一次就会创建一个新的对象。 而另外一种是先在栈中创建一个对String类的对象引用变量str，然后查找栈中有没有存放"abc"，假设没有。则将"abc"存放进栈，并令str指 向”abc”，假设已经有”abc” 则直接令str指向“abc”。&nbsp;</p> <p> 比較类里面的数值是否相等时，用equals()方法。当測试两个包装类的引用是否指向同一个对象时，用==，以下用样例说明上面的理论。&nbsp;<br /> String str1 = "abc";&nbsp;<br /> String str2 = "abc";&nbsp;<br /> System.out.println(str1==str2); //true&nbsp;<br /> 能够看出str1和str2是指向同一个对象的。&nbsp;</p> <p> String str1 =new String ("abc");&nbsp;<br /> String str2 =new String ("abc");&nbsp;<br /> System.out.println(str1==str2); // false&nbsp;<br /> 用new的方式是生成不同的对象。</p> <p>每一次生成一个。</p> <p> 因此用另外一种方式(String str1 ="abc")创建多个”abc”字符串,在内存中事实上仅仅存在一个对象而已. 这样的写法有利与节省内存空间. 同一时候它能够在一定程度上提高程序的执行速度，由于JVM会自己主动依据栈中数据的实际情况来决定是否有必要创建新对象。而对于String str = new String("abc")的代码。则一概在堆中创建新对象，而无论其字符串值是否相等，是否有必要创建新对象，从而加重了程序的负担。</p> <p> &nbsp;还有一方面, 要注意: 我们在使用诸如String str = "abc"；的格式定义类时。总是想当然地觉得，创建了String类的对象str。操心陷阱！对象可能并没有被创建！</p> <p>而可能仅仅是指向一个先前已经创建的 对象。仅仅有通过new()方法才干保证每次都创建一个新的对象。&nbsp;<br /> 因为String类的immutable性质，当String变量须要常常变换其值时。应该考虑使用StringBuffer类，以提高程序效率。&nbsp;</p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;"><br /></span></p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;">************************************************************************************************************************************************************</span></p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;"><br /></span></p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;">Java中Equals和==的差别</span></p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;">java中的数据类型，可分为两类：&nbsp;<br /> 1.基本数据类型，也称原始数据类型。byte,short,char,int,long,float,double,boolean&nbsp;<br /> &nbsp; 他们之间的比較，应用双等号（==）,比較的是他们的值。</span></p> <p>&nbsp;<br /> 2.复合数据类型(类)&nbsp;<br /> &nbsp; 当他们用（==）进行比較的时候，比較的是他们在内存中的存放地址，所以，除非是同一个new出来的对象，他们的比較后的结果为true，否则比較后结果为false。</p> <p> JAVA其中全部的类都是继承于Object这个基类的。在Object中的基类中定义了一个equals的方法，这种方法的初始行为是比較对象的内存地 址，但在一些类库其中这种方法被覆盖掉了。如String,Integer,Date在这些类其中equals有其自身的实现。而不再是比較类在堆内存中的存放地址了。</p> <p> &nbsp; 对于复合数据类型之间进行equals比較。在没有覆写equals方法的情况下，他们之间的比較还是基于他们在内存中的存放位置的地址值的，由于Object的equals方法也是用双等号（==）进行比較的。所以比較后的结果跟双等号（==）的结果同样。</p> <p></p> <pre><code class="language-html">&lt;span style="font-family:Microsoft YaHei;font-size:12px;"&gt;public class TestString { 	public static void main(String[] args) { 		String s1 = "Monday"; 		String s2 = "Monday"; 		if (s1 == s2) { 			System.out.println("s1 == s2"); 		} else { 			System.out.println("s1 != s2"); 		} 	} }&lt;/span&gt;</code></pre> <p><span style="font-family:'Microsoft YaHei';font-size:12px;"><br /></span></p> <p>  <span style="font-family:'Microsoft YaHei';font-size:12px;">编译并执行程序，输出：s1 == s2说明：s1 与 s2 引用同一个 String 对象 -- "Monday"!<br /> 2.再略微修改一下程序，会有更奇怪的发现：</span> </p> <pre><code class="language-html">&lt;span style="font-family:Microsoft YaHei;font-size:12px;"&gt;public class TestString { public static void main(String[] args) { String s1 = "Monday"; String s2 = new String("Monday"); if (s1 == s2) {System.out.println("s1 == s2");} else {System.out.println("s1 != s2");} if (s1.equals(s2)) {System.out.println("s1 equals s2");} else{ System.out.println("s1 not equals s2");} } }&lt;/span&gt;</code></pre> <p>  <span style="font-family:'Microsoft YaHei';font-size:12px;"><br /> 我们将s2用new操作符创建<br /> 程序输出：<br /> s1 != s2<br /> s1 equals s2<br /> 说明：s1 s2分别引用了两个"Monday"String对象</p> <p> 3. 字符串缓冲池<br /> 原来，程序在执行的时候会创建一个字符串缓冲池当使用 s2 = "Monday" 这种表达是创建字符串的时候，程序首先会在这个String缓冲池中寻找同样值的对象，在第一个程序中。s1先被放到了池中，所以在s2被创建的时候，程序找到了具有同样值的 s1<br /> 将s2引用s1所引用的对象"Monday"<br /> 第二段程序中，使用了 new 操作符，他明确的告诉程序："我要一个新的！不要旧的。"于是一个新的"Monday"Sting对象被创建在内存中。他们的值同样。可是位置不同。一个在池中游泳一个在岸边歇息。哎呀。真是资源浪费。明明是一样的非要分开做什么呢？</p> <p> 4.再次更改程序：</span> </p> <pre><code class="language-html">&lt;span style="font-family:Microsoft YaHei;font-size:12px;"&gt;public class TestString { public static void main(String[] args) { String s1 = "Monday"; String s2 = new String("Monday"); s2 = s2.intern(); if (s1 == s2) {System.out.println("s1 == s2");} else {System.out.println("s1 != s2");} if (s1.equals(s2)) {System.out.println("s1 equals s2");} else{ System.out.println("s1 not equals s2");} } }&lt;/span&gt;</code></pre> <p>  <span style="font-family:'Microsoft YaHei';font-size:12px;"><br /> 这次增加：s2 = s2.intern();<br /> 程序输出：<br /> s1 == s2<br /> s1 equals s2<br /> 原 来。（java.lang.String的intern()方法"abc".intern()方法的返回值还是字符串"abc"，表面上看起来好像这个方 法没什么用处。但实际上。它做了个小动作：检查字符串池里是否存在"abc"这么一个字符串，假设存在，就返回池里的字符串。假设不存在。该方法会 把"abc"加入到字符串池中，然后再返回它的引用。<br /> ）</span> </p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;"><br /></span></p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;">************************************************************************************************************************************************************</span></p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;"><br /></span></p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;">查看源代码发表小结：</span></p> <pre><code class="language-html">&lt;span style="font-family:Microsoft YaHei;font-size:12px;"&gt;public boolean equals(Object anObject) {         if (this == anObject) {             return true;         }         if (anObject instanceof String) {             String anotherString = (String) anObject;             int n = value.length;             if (n == anotherString.value.length) {                 char v1[] = value;                 char v2[] = anotherString.value;                 int i = 0;                 while (n-- != 0) {                     if (v1[i] != v2[i])                             return false;                     i++;                 }                 return true;             }         }         return false;     }&lt;/span&gt;</code></pre> <p><span style="font-family:'Microsoft YaHei';font-size:12px;"><br /></span></p> <p>  <span style="font-family:'Microsoft YaHei';font-size:12px;">上面的这一段是String的equals源代码，通过细心的解读我们能够发现当中的奥妙。</span></p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;">String重写的equals方法保留了Object比較两个对象内容地址是否相等。</span></p> <p>在此基础上添加了一个比較String的值是否相等。这是什么意思呢。 假设equals括号中的对象不是String类型的。那么比較他和原对象的内存地址是否相等。假设instanceofString 那么先把这个对象转为String，再把它的值变为char数组，也就是以下的value，假设他们的char数组长度相等再对这个数组的char进行一个个遍历比較是否一样。假设都一样就equals为true，否则为false。</p> </p> <p><span style="font-family:'Microsoft YaHei';font-size:12px;"><br /></span></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-79220.htm">Spring @Scheduled 任务 参数动态配置</a></p>
                                        <p>下一个：<a href="/news/article-79927.htm">动物疫苗厂家排名榜最新图片 动物疫苗厂家排名榜最新图片大全</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-41155.htm" title="动物疫苗和人体疫苗的区别在哪里呢英语（动物疫苗的重要性）">动物疫苗和人体疫苗的区别在哪里呢英语（动物疫苗的重要性）</a></li>
                        <li class="py-2"><a href="/news/article-62334.htm" title="动物疫苗接种注意问题及措施（动物疫苗使用时的注意事项有哪些）">动物疫苗接种注意问题及措施（动物疫苗使用时的注意事项有哪些）</a></li>
                        <li class="py-2"><a href="/news/article-52198.htm" title="国内前十名的兽药厂家排名（国内十大兽药厂排名）">国内前十名的兽药厂家排名（国内十大兽药厂排名）</a></li>
                        <li class="py-2"><a href="/news/article-71787.htm" title="男生开什么店合适（男生开店什么店比较好?）">男生开什么店合适（男生开店什么店比较好?）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-10-free-nekoray-node.htm" title="「2月10日」最高速度18.7M/S，2025年Nekoray每天更新免费机场订阅分享">「2月10日」最高速度18.7M/S，2025年Nekoray每天更新免费机场订阅分享</a></li>
                        <li class="py-2"><a href="/news/article-69171.htm" title="SpringCloud系列之五&#8212;集中配置组件Config+消息总线Bus">SpringCloud系列之五&#8212;集中配置组件Config+消息总线Bus</a></li>
                        <li class="py-2"><a href="/news/article-51149.htm" title="养鱼专家在线咨询网 养鱼专家在线咨询网站">养鱼专家在线咨询网 养鱼专家在线咨询网站</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-15-free-subscribe-node.htm" title="「3月15日」最高速度19.9M/S，2025年Nekoray每天更新免费机场订阅分享">「3月15日」最高速度19.9M/S，2025年Nekoray每天更新免费机场订阅分享</a></li>
                        <li class="py-2"><a href="/news/article-74445.htm" title="义乌宠物收容中心（义乌宠物收容中心有哪些）">义乌宠物收容中心（义乌宠物收容中心有哪些）</a></li>
                        <li class="py-2"><a href="/news/article-76500.htm" title="两个月的猫抓了出了一点血横（两个月的猫抓了一下）">两个月的猫抓了出了一点血横（两个月的猫抓了一下）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">72</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </div>
    <!-- //about section -->
        <!-- footer -->
    <footer class="w3l-footer-16">
        <div class="w3l-footer-16-main">
            <div class="container">
                <div class="below-section mt-5 text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p class="copy-text">
                        Nekoray Github节点订阅官网 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- //footer -->
    <!-- Js scripts -->
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fas fa-level-up-alt" aria-hidden="true"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- //move top -->
    <!-- common jquery plugin -->
    <script src="/assets/website/js/frontend/nekoraygithub/jquery-3.5.1.min.js"></script>
    <!-- //common jquery plugin -->
    <!-- banner image moving effect -->
    <script>
    var lFollowX = 0,
        lFollowY = 0,
        x = 0,
        y = 0,
        friction = 1 / 30;

    function animate() {
        x += (lFollowX - x) * friction;
        y += (lFollowY - y) * friction;

        translate = 'translate(' + x + 'px, ' + y + 'px) scale(1.1)';

        $('.banner-image').css({
            '-webit-transform': translate,
            '-moz-transform': translate,
            'transform': translate
        });

        window.requestAnimationFrame(animate);
    }

    $(window).on('mousemove click', function(e) {

        var lMouseX = Math.max(-100, Math.min(100, $(window).width() / 2 - e.clientX));
        var lMouseY = Math.max(-100, Math.min(100, $(window).height() / 2 - e.clientY));
        lFollowX = (20 * lMouseX) / 100; // 100 : 12 = lMouxeX : lFollow
        lFollowY = (10 * lMouseY) / 100;

    });

    animate();
    </script>
    <!-- //banner image moving effect -->
    <!-- typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["Designer's", "Developer's", "Creator's"];
    const typingDelay = 300;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- owl carousel -->
    <script src="/assets/website/js/frontend/nekoraygithub/owl.carousel.js"></script>
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo2").owlCarousel({
            loop: true,
            nav: false,
            margin: 50,
            responsiveClass: true,
            autoplay: true,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                991: {
                    items: 2,
                    margin: 30,
                    nav: false
                },
                1080: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- //owl carousel -->
    <!-- theme switch js (light and dark)-->
    <script src="/assets/website/js/frontend/nekoraygithub/theme-change.js"></script>
    <script>
    function autoType(elementClass, typingSpeed) {
        var thhis = $(elementClass);
        thhis.css({
            "position": "relative",
            "display": "inline-block"
        });
        thhis.prepend('<div class="cursor" style="right: initial; left:0;"></div>');
        thhis = thhis.find(".text-js");
        var text = thhis.text().trim().split('');
        var amntOfChars = text.length;
        var newString = "";
        thhis.text("|");
        setTimeout(function() {
            thhis.css("opacity", 1);
            thhis.prev().removeAttr("style");
            thhis.text("");
            for (var i = 0; i < amntOfChars; i++) {
                (function(i, char) {
                    setTimeout(function() {
                        newString += char;
                        thhis.text(newString);
                    }, i * typingSpeed);
                })(i + 1, text[i]);
            }
        }, 1500);
    }

    $(document).ready(function() {
        // Now to start autoTyping just call the autoType function with the 
        // class of outer div
        // The second paramter is the speed between each letter is typed.   
        autoType(".type-js", 200);
    });
    </script>
    <!-- //theme switch js (light and dark)-->
    <!-- magnific popup -->
    <script src="/assets/website/js/frontend/nekoraygithub/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //magnific popup -->
    <!-- MENU-JS -->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!-- //MENU-JS -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- //disable body scroll which navbar is in active -->
    <!--bootstrap-->
    <script src="/assets/website/js/frontend/nekoraygithub/bootstrap.min.js"></script>
    <!-- //bootstrap-->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
    <!-- //Js scripts -->
</body>

</html>